--[[-----------------------------------------------------------------------------
    Amalgam Configuration Handler

    Handles registration, retrieval, and override of core configuration values.

    Do not edit this file directly.
    Use `Amalgam.RegisterConfig` to define new settings elsewhere in the codebase.
    Path: */sh_config.lua
-----------------------------------------------------------------------------]]--

Amalgam.ConfigCache = Amalgam.ConfigCache or {}

function Amalgam.RegisterConfig(key, default, description)
    Amalgam.ConfigCache[key] = {
        default = default,
        type = type(default),
        description = description or ""
    }
end

function Amalgam.GetConfig(key)
    local def = Amalgam.ConfigCache[key]

    if (not def) then
        return nil
    end

    if (SERVER) then
        return (Amalgam.ConfigOverrides[key] ~= nil) and Amalgam.ConfigOverrides[key] or def.default
    end

    return (def.synced ~= nil) and def.synced or def.default
end

if (SERVER) then

    Amalgam.ConfigOverrides = Amalgam.ConfigOverrides or {}

    function Amalgam.SetConfig(key, value)
        local def = Amalgam.ConfigCache[key]

        if (not def) then
            print("[Amalgam] Invalid config key: " .. tostring(key))
            return
        end

        if (type(value) ~= def.type) then
            print("[Amalgam] Rejected override for '" .. key .. "'. Expected " .. def.type .. ", got " .. type(value))
            return
        end

        Amalgam.ConfigOverrides[key] = value
        Amalgam.SaveConfigOverrides()
        Amalgam.SyncConfig()
    end

    function Amalgam.GetResolvedConfig()
        local resolved = {}

        for key, data in pairs(Amalgam.ConfigCache) do
            resolved[key] = Amalgam.ConfigOverrides[key] or data.default
        end

        return resolved
    end

    function Amalgam.SyncConfig(ply)
        local data = util.TableToJSON(Amalgam.GetResolvedConfig())
        local comp = util.Compress(data)

        if (IsValid(ply)) then
            net.Start("nSyncConfig")
                net.WriteUInt(#comp, 32)
                net.WriteData(comp, #comp)
            net.Send(ply)
        else
            for _, v in ipairs(player.GetAll()) do
                if (IsValid(v) and v:IsPlayer()) then
                    net.Start("nSyncConfig")
                        net.WriteUInt(#comp, 32)
                        net.WriteData(comp, #comp)
                    net.Send(v)
                end
            end
        end
    end

    function Amalgam.SaveConfigOverrides()
        local overrides = util.TableToJSON(Amalgam.ConfigOverrides, true)
        file.Write("amalgam/config_overrides.txt", overrides)
    end

    function Amalgam.LoadConfigOverrides()
        local path = "amalgam/config_overrides.txt"

        if (not file.Exists(path, "DATA")) then
            return
        end

        local data = file.Read(path, "DATA")
        local parsed = util.JSONToTable(data or "") or {} 
    end

    hook.Add("PostGamemodeLoaded", "LoadConfig", function()
        timer.Simple(0, function()
            Amalgam.LoadConfigOverrides()
        end)
    end)

    hook.Add("PlayerInitialSpawn", "SyncClientConfig", function(ply)
        timer.Simple(1, function()
            if (IsValid(ply)) then
                Amalgam.SyncConfig(ply)
            end
        end)
    end)

     hook.Add("OnReloaded", "ResyncConfigOnRefresh", function()
        timer.Simple(0.5, function()
            Amalgam.LoadConfigOverrides()
            Amalgam.SyncConfig()
        end)
    end)

    Amalgam.RegisterCommand("dev_listconfigs", "Displays all registered config values.", function(ply)
        for key, data in pairs(Amalgam.ConfigCache) do
            local override = Amalgam.ConfigOverrides[key]
            local status = (override ~= nil) and tostring(override) or "N/A"

            local output = string.format(
                "[%s]\n  • Description: %s\n  • Default: %s\n  • Current: %s",
                key,
                data.description or "No description.",
                tostring(data.default),
                status
            )

            Amalgam.TerminalNetSend(output, "info", ply)
        end
    end, "RootUser")

    Amalgam.RegisterCommand("dev_setconfig", "Sets a configuration value", function(ply, key, value)
        local def = Amalgam.ConfigCache[key]

        if (not def) then
            Amalgam.TerminalNetSend("[Error] Invalid config key: " .. key, "error", ply)
            return
        end

        if (def.type == "number") then
            value = tonumber(value)
        elseif (def.type == "boolean") then
            value = (value == "true")
        end

        if (type(value) ~= def.type) then
            Amalgam.TerminalNetSend("[Error] Type mismatch for '" .. key .. "'. Expected " .. def.type .. ", got " .. type(value), "error", ply)
            return
        end

        Amalgam.SetConfig(key, value)
        Amalgam.TerminalNetSend("[Success] Config updated: " .. key .. " = " .. tostring(value), "info", ply)
    end, "RootUser", {"key", "value"})

else

    net.Receive("nSyncConfig", function()
        local len = net.ReadUInt(32)
        local comp = net.ReadData(len)

        local json = util.Decompress(comp)
        local par = util.JSONToTable(json or "")

        if (not par) then
            return
        end

        for key, val in pairs(par) do
            if (Amalgam.ConfigCache and Amalgam.ConfigCache[key]) then
                Amalgam.ConfigCache[key].synced = val
            end
        end
    end)

end
